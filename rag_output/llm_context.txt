============================================================
MERGE CONFLICT CONTEXT FOR LLM
============================================================

LOCAL CHANGES (Your Branch):
----------------------------------------

[1] File: sample_app.py
    Lines: 29-48
    Type: unknown
    Code:
    def add_user(self, username: str, email: str, password: str) -> Dict:
            """Add a new user to the system.
    
            Args:
                username: Unique username
                email: User's email address
                password: Encrypted password
    
            Returns:
                Dict containing user details
            """
            user = {
                "id": len(self.users) + 1,
                "username": username,
                "email": email,
                "password": self._hash_password(password),
                "created_at": datetime.now().isoformat()
            }
            self.users.append(user)
            return user


[2] File: sample_app.py
    Lines: 76-102
    Type: unknown
    Code:
    def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:
        """Calculate total price with tax and discount.
    
        Args:
            items: List of item dictionaries with 'price' and 'quantity'
            tax_rate: Tax rate to apply (default 8%)
            discount: Discount percentage to apply
    
        Returns:
            Dictionary with subtotal, tax, discount, and total
        """
        subtotal = sum(item['price'] * item.get('quantity', 1) for item in items)
    
        # Apply discount first
        discount_amount = subtotal * discount
        after_discount = subtotal - discount_amount
    
        # Then apply tax
        tax_amount = after_discount * tax_rate
        total = after_discount + tax_amount
    
        return {
            "subtotal": round(subtotal, 2),
            "discount": round(discount_amount, 2),
            "tax": round(tax_amount, 2),
            "total": round(total, 2)
        }



REMOTE CHANGES (Main Branch):
----------------------------------------

[1] File: sample_app.py
    Lines: 29-48
    Type: unknown
    Code:
    def add_user(self, username: str, email: str, password: str) -> Dict:
            """Add a new user to the system.
    
            Args:
                username: Unique username
                email: User's email address
                password: Encrypted password
    
            Returns:
                Dict containing user details
            """
            user = {
                "id": len(self.users) + 1,
                "username": username,
                "email": email,
                "password": self._hash_password(password),
                "created_at": datetime.now().isoformat()
            }
            self.users.append(user)
            return user


[2] File: sample_app.py
    Lines: 20-73
    Type: unknown
    Code:
    class UserManager:
        """Manages user accounts and authentication."""
    
        def __init__(self, database_url: str = "sqlite:///users.db"):
            """Initialize the user manager with database connection."""
            self.database_url = database_url
            self.users = []
            self.active_sessions = {}
    
        def add_user(self, username: str, email: str, password: str) -> Dict:
            """Add a new user to the system.
    
            Args:
                username: Unique username
                email: User's email address
                password: Encrypted password
    
            Returns:
                Dict containing user details
            """
            user = {
                "id": len(self.users) + 1,
                "username": username,
                "email": email,
                "password": self._hash_password(password),
                "created_at": datetime.now().isoformat()
            }
            self.users.append(user)
            return user
    
        def authenticate(self, username: str, password: str) -> Optional[str]:
            """Authenticate a user and return session token."""
            for user in self.users:
                if user["username"] == username:
                    if self._verify_password(password, user["password"]):
                        token = self._generate_token()
                        self.active_sessions[token] = user["id"]
                        return token
            return None
    
        def _hash_password(self, password: str) -> str:
            """Hash password for storage."""
            # Simplified for demo - would use bcrypt in production
            return f"hashed_{password}"
    
        def _verify_password(self, password: str, hashed: str) -> bool:
            """Verify password against hash."""
            return f"hashed_{password}" == hashed
    
        def _generate_token(self) -> str:
            """Generate session token."""
            import random
            import string
            return ''.join(random.choices(string.ascii_letters + string.digits, k=32))


[3] File: sample_app.py
    Lines: 50-58
    Type: unknown
    Code:
    def authenticate(self, username: str, password: str) -> Optional[str]:
            """Authenticate a user and return session token."""
            for user in self.users:
                if user["username"] == username:
                    if self._verify_password(password, user["password"]):
                        token = self._generate_token()
                        self.active_sessions[token] = user["id"]
                        return token
            return None


[4] File: sample_app.py
    Lines: 76-102
    Type: unknown
    Code:
    def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:
        """Calculate total price with tax and discount.
    
        Args:
            items: List of item dictionaries with 'price' and 'quantity'
            tax_rate: Tax rate to apply (default 8%)
            discount: Discount percentage to apply
    
        Returns:
            Dictionary with subtotal, tax, discount, and total
        """
        subtotal = sum(item['price'] * item.get('quantity', 1) for item in items)
    
        # Apply discount first
        discount_amount = subtotal * discount
        after_discount = subtotal - discount_amount
    
        # Then apply tax
        tax_amount = after_discount * tax_rate
        total = after_discount + tax_amount
    
        return {
            "subtotal": round(subtotal, 2),
            "discount": round(discount_amount, 2),
            "tax": round(tax_amount, 2),
            "total": round(total, 2)
        }



SIMILAR CODE PATTERNS FOUND:
----------------------------------------
  (No similar code patterns found)
