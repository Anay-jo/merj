{
  "local_chunks": [
    "CodeChunk(file_path='sample_app.py', language='python', signature='def add_user(self, username: str, email: str, password: str) -> Dict:', content='    def add_user(self, username: str, email: str, password: str) -> Dict:\\n        \"\"\"Add a new user to the system.\\n\\n        Args:\\n            username: Unique username\\n            email: User\\'s email address\\n            password: Encrypted password\\n\\n        Returns:\\n            Dict containing user details\\n        \"\"\"\\n        user = {\\n            \"id\": len(self.users) + 1,\\n            \"username\": username,\\n            \"email\": email,\\n            \"password\": self._hash_password(password),\\n            \"created_at\": datetime.now().isoformat()\\n        }\\n        self.users.append(user)\\n        return user', chunk_type='function', start_line=29, end_line=48, node_types=['function_definition'])",
    "CodeChunk(file_path='sample_app.py', language='python', signature='def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:', content='def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:\\n    \"\"\"Calculate total price with tax and discount.\\n\\n    Args:\\n        items: List of item dictionaries with \\'price\\' and \\'quantity\\'\\n        tax_rate: Tax rate to apply (default 8%)\\n        discount: Discount percentage to apply\\n\\n    Returns:\\n        Dictionary with subtotal, tax, discount, and total\\n    \"\"\"\\n    subtotal = sum(item[\\'price\\'] * item.get(\\'quantity\\', 1) for item in items)\\n\\n    # Apply discount first\\n    discount_amount = subtotal * discount\\n    after_discount = subtotal - discount_amount\\n\\n    # Then apply tax\\n    tax_amount = after_discount * tax_rate\\n    total = after_discount + tax_amount\\n\\n    return {\\n        \"subtotal\": round(subtotal, 2),\\n        \"discount\": round(discount_amount, 2),\\n        \"tax\": round(tax_amount, 2),\\n        \"total\": round(total, 2)\\n    }', chunk_type='function', start_line=76, end_line=102, node_types=['function_definition'])"
  ],
  "remote_chunks": [
    "CodeChunk(file_path='sample_app.py', language='python', signature='def add_user(self, username: str, email: str, password: str) -> Dict:', content='    def add_user(self, username: str, email: str, password: str) -> Dict:\\n        \"\"\"Add a new user to the system.\\n\\n        Args:\\n            username: Unique username\\n            email: User\\'s email address\\n            password: Encrypted password\\n\\n        Returns:\\n            Dict containing user details\\n        \"\"\"\\n        user = {\\n            \"id\": len(self.users) + 1,\\n            \"username\": username,\\n            \"email\": email,\\n            \"password\": self._hash_password(password),\\n            \"created_at\": datetime.now().isoformat()\\n        }\\n        self.users.append(user)\\n        return user', chunk_type='function', start_line=29, end_line=48, node_types=['function_definition'])",
    "CodeChunk(file_path='sample_app.py', language='python', signature='class UserManager:', content='class UserManager:\\n    \"\"\"Manages user accounts and authentication.\"\"\"\\n\\n    def __init__(self, database_url: str = \"sqlite:///users.db\"):\\n        \"\"\"Initialize the user manager with database connection.\"\"\"\\n        self.database_url = database_url\\n        self.users = []\\n        self.active_sessions = {}\\n\\n    def add_user(self, username: str, email: str, password: str) -> Dict:\\n        \"\"\"Add a new user to the system.\\n\\n        Args:\\n            username: Unique username\\n            email: User\\'s email address\\n            password: Encrypted password\\n\\n        Returns:\\n            Dict containing user details\\n        \"\"\"\\n        user = {\\n            \"id\": len(self.users) + 1,\\n            \"username\": username,\\n            \"email\": email,\\n            \"password\": self._hash_password(password),\\n            \"created_at\": datetime.now().isoformat()\\n        }\\n        self.users.append(user)\\n        return user\\n\\n    def authenticate(self, username: str, password: str) -> Optional[str]:\\n        \"\"\"Authenticate a user and return session token.\"\"\"\\n        for user in self.users:\\n            if user[\"username\"] == username:\\n                if self._verify_password(password, user[\"password\"]):\\n                    token = self._generate_token()\\n                    self.active_sessions[token] = user[\"id\"]\\n                    return token\\n        return None\\n\\n    def _hash_password(self, password: str) -> str:\\n        \"\"\"Hash password for storage.\"\"\"\\n        # Simplified for demo - would use bcrypt in production\\n        return f\"hashed_{password}\"\\n\\n    def _verify_password(self, password: str, hashed: str) -> bool:\\n        \"\"\"Verify password against hash.\"\"\"\\n        return f\"hashed_{password}\" == hashed\\n\\n    def _generate_token(self) -> str:\\n        \"\"\"Generate session token.\"\"\"\\n        import random\\n        import string\\n        return \\'\\'.join(random.choices(string.ascii_letters + string.digits, k=32))', chunk_type='class', start_line=20, end_line=73, node_types=['class_definition'])",
    "CodeChunk(file_path='sample_app.py', language='python', signature='def authenticate(self, username: str, password: str) -> Optional[str]:', content='    def authenticate(self, username: str, password: str) -> Optional[str]:\\n        \"\"\"Authenticate a user and return session token.\"\"\"\\n        for user in self.users:\\n            if user[\"username\"] == username:\\n                if self._verify_password(password, user[\"password\"]):\\n                    token = self._generate_token()\\n                    self.active_sessions[token] = user[\"id\"]\\n                    return token\\n        return None', chunk_type='function', start_line=50, end_line=58, node_types=['function_definition'])",
    "CodeChunk(file_path='sample_app.py', language='python', signature='def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:', content='def calculate_price(items: List[Dict], tax_rate: float = 0.08, discount: float = 0.0) -> Dict:\\n    \"\"\"Calculate total price with tax and discount.\\n\\n    Args:\\n        items: List of item dictionaries with \\'price\\' and \\'quantity\\'\\n        tax_rate: Tax rate to apply (default 8%)\\n        discount: Discount percentage to apply\\n\\n    Returns:\\n        Dictionary with subtotal, tax, discount, and total\\n    \"\"\"\\n    subtotal = sum(item[\\'price\\'] * item.get(\\'quantity\\', 1) for item in items)\\n\\n    # Apply discount first\\n    discount_amount = subtotal * discount\\n    after_discount = subtotal - discount_amount\\n\\n    # Then apply tax\\n    tax_amount = after_discount * tax_rate\\n    total = after_discount + tax_amount\\n\\n    return {\\n        \"subtotal\": round(subtotal, 2),\\n        \"discount\": round(discount_amount, 2),\\n        \"tax\": round(tax_amount, 2),\\n        \"total\": round(total, 2)\\n    }', chunk_type='function', start_line=76, end_line=102, node_types=['function_definition'])"
  ],
  "total_chunks": 6,
  "rag_results": [],
  "metadata": {
    "collection": "demo_code_chunks",
    "k": 3,
    "threshold": 0.7
  },
  "timestamp": "2025-10-26T04:43:20.311144"
}